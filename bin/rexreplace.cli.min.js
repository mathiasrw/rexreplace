#!/usr/bin/env node
!function(){"use strict";var n={};n.red=n.green=n.gray=function(e){return e};function o(e,t){void 0===t&&(t=""),i.quiet||i.quietTotal||console.error(n.gray(e),t)}function l(e,t){void 0===t&&(t=""),i.verbose?o(e,t):c(e+" "+t)}function r(e,t,n){void 0===e&&(e=""),void 0===t&&(t=""),(n=void 0===n?!1:n)&&!i.quietTotal&&i.showHelp(),e&&s(" ❌ "+e,t),a()}var i=null,s=function(e,t){return void 0===t&&(t=""),i.quiet||i.quietTotal||console.error(n.red(e),t),i.halt&&a(e),!1};function c(e){i.debug&&console.error(n.gray(JSON.stringify(e,null,4)))}function K(e){i.verbose&&c(e)}function a(e,t){void 0===e&&(e=1),(t=void 0===t?"":t)&&console.error(+t),process.exit(e)}var U=require("fs"),Z=require("path"),X=require("globs"),d=new Date,e="6.1.4";function p(t){return i=t=void 0===t?{engine:"V8"}:t,K("Displaying steps for:"),K(t),t.pattern=function(e){K("Get final pattern");e=b(e.pattern,e);return K(e),e}(t)||"",t.replacement=function(e){if(K("Get final replacement"),e.replacement=b(e.replacement,e),e.replacementPipe){if(K("Piping replacement"),e.pipedDataUsed=!0,null===e.pipedData)return r("No data piped into replacement");e.replacement=e.pipedData}if(e.outputMatch)return K("Output match"),parseInt(process.versions.node)<6?r("outputMatch is only supported in node 6+"):function(){var e=arguments;if(K(arguments),3===arguments.length)return K("Printing full match"),process.stdout.write(arguments[0]+"\n"),"";for(var t=1;t<arguments.length-2;t++)process.stdout.write(e[t]);return process.stdout.write("\n"),""};if(e.replacementJs&&/\$\d/.test(e.replacement)&&parseInt(process.versions.node)<6)return r("Captured groups for javascript replacement is only supported in node 6+");return K(e.replacement),e.replacement}(t)||"",t.replacementOri=t.replacement,t.regex=function(t){K("Get final regex with engine: "+t.engine);var e=t.pattern;t.literal&&(e=e.replace(/[-\[\]{}()*+?.,\/\\^$|#\s]/g,"\\$&"));var n=null,i=function(e){K("Get flags");var t="";e.voidGlobal||(t+="g");e.voidIgnoreCase||(t+="i");e.voidMultiline||(t+="m");e.dotAll&&(t+="s");e.unicode&&(t+="u");return K(t),t}(t);switch(t.engine){case"V8":try{n=new RegExp(e,i)}catch(e){if(t.debug)throw new Error(e);r(e.message)}break;case"RE2":try{var a=require("re2");n=new a(e,i)}catch(e){if(t.debug)throw new Error(e);r(e.message)}break;default:r("Engine "+t.engine+" not supported")}return K(n),n}(t)||"",K(t),function(e){if(K("Check Piped Data"),e.files.length)return e.replacementJs||l("Piped data never used."),!1;return null!==e.pipedData&&!e.pipedDataUsed&&(e.dataIsPiped=!0,e.output=!0)}(t)?a("Piped data",t,t.pipedData):(t.files=X.sync(t.files),t.files.length?(l(t.files.length+" files found"),K(t),void t.files.filter(function(e){return!!U.existsSync(e)||s("File not found:",e)}).forEach(function(e){return function(n,i){{if(i.voidAsync){l("Open sync: "+n);var e=U.readFileSync(n,i.encoding);return a(n,i,e)}l("Open async: "+n),U.readFile(n,i.encoding,function(e,t){return e?s(e):a(n,i,t)})}}(e,t)})):s(t.files.length+" files found"));function a(t,n,e){c("Work on content from: "+t),n.replacementJs&&(n.replacement=function(e,t,n){var D=d,O=f(D),M=t.pipedData,T=n,I=t.pattern,$=t.replacementOri,E=process.cwd(),S=O,B=" ",P="❌",F="❌",H="❌",V="❌",A="❌",G="❌",R="❌",z="❌",W="❌",J="❌",N=new Date(0),C=new Date(0),L=-1,Q="❌",Y=new Function("require","fs","globs","path","pipe","pipe_","find","find_","text","text_","file","file_","file_rel","file_rel_","dirpath","dirpath_","dirpath_rel","dirpath_rel_","dirname","dirname_","filename","filename_","name","name_","ext","ext_","cwd","cwd_","now","now_","time_obj","time","time_","mtime_obj","mtime","mtime_","ctime_obj","ctime","ctime_","bytes","bytes_","size","size_","nl","_","__code_rr",'var path = require("path");var __require_ = require;var r = function(file){var result = null;try{result = __require_(file);} catch (e){var dir = /^[\\/]/.test(file) ? "" : cwd;result = __require_(path.resolve(dir, file));};return result;};require = r;return eval(__code_rr);'),i=/bytes|size/.test(t.replacement),n=i&&5e7<T.length;t.dataIsPiped||(P=Z.normalize(Z.join(E,e)),F=Z.relative(E,P),e=Z.parse(P),H=e.dir,V=Z.relative(E,H),A=P.match(/[\\\/]+([^\\\/]+)[\\\/]+[^\\\/]+$/)[1],G=e.base,R=e.name,z=e.ext,(n||/[mc]time/.test(t.replacement))&&(n=U.statSync(P),L=n.size,Q=u(L),N=n.mtime,C=n.ctime,W=f(N),J=f(C)));i&&-1===L&&(L=Buffer.from(T).length,Q=u(L));return/\$\d/.test(t.replacement)?function(){var e=arguments;K(arguments);for(var t=M,n=T,i=I,a=P,r=F,o=H,l=V,s=A,c=G,d=R,p=z,u=E,f=S,m=D,h=O,g=N,b=W,v=C,w=J,y=L,_=Q,x=B,k=$,q="",j=0;j<arguments.length-2;j++)q+="var $"+j+"="+JSON.stringify(e[j])+"; ";return Y(require,U,X,Z,t,t+x,i,i+x,n,n+x,a,a+x,r,r+x,o,o+x,l,l+x,s,s+x,c,c+x,d,d+x,p,p+x,u,u+x,f,f+B,m,h,h+B,g,b,b+B,v,w,w+B,y,y+x,_,_+x,"\n",x,q+k)}:Y(require,U,X,Z,M,M+B,I,I+B,T,T+B,P,P+B,F,F+B,H,H+B,V,V+B,A,A+B,G,G+B,R,R+B,z,z+B,E,E+B,S,S+B,D,O,O+B,N,W,W+B,C,J,J+B,L,L+B,Q,Q+B,"\n",B,$)}(t,n,e));var i=e.replace(n.regex,n.replacement);if(!n.outputMatch){if(n.output)return c("Output result from: "+t),process.stdout.write(i);if(i!==e){if(e=void 0,c("Write new content to: "+t),n.voidBackup)return U.writeFile(t,i,n.encoding,function(e){return e?s(e):void o(t)});var a=Z.normalize(Z.join(process.cwd(),t)),e=(new Date).toISOString().replace(/:/g,"_").replace("Z",""),r=a+"."+e+".backup";if(n.voidAsync){try{U.renameSync(a,r),U.writeFileSync(a,i,n.encoding),n.keepBackup||U.unlinkSync(r)}catch(e){return s(e)}return o(t)}U.rename(a,r,function(e){return e?s(e):void U.writeFile(a,i,n.encoding,function(e){return e?s(e):void(n.keepBackup?o(t):U.unlink(r,function(e){return e?s(e):void o(t)}))})})}else l("Nothing changed in: "+t)}}}function u(e){if(1===e)return"1 Byte";var t=Math.floor(Math.log(e)/Math.log(1024));return(e/Math.pow(1024,t)).toFixed(t?1:0)+" "+["Bytes","KB","MB","GB","TB"][t]}function f(e){return(e=void 0===e?new Date:e).getFullYear()+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+("0"+e.getDate()).slice(-2)+" "+("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"."+("00"+e.getMilliseconds()).slice(-3)}var t,m,h,g={euro:/€/g,section:/§/g};function b(e,t){return void 0===e&&(e=""),t.voidEuro||(e=e.replace(g.euro,"$")),e=!t.voidSection?e.replace(g.section,"\\"):e}var v=!1;process.argv.length<4?v=!0:(t=process.argv.splice(2,2),m=t[0],h=t[1]);var w=require("yargs").strict().usage("RexReplace 6.1.4: Regexp search and replace for files using lookahead and backreference to matching groups in the replacement. Defaults to global multiline case-insensitive search.\n\n> rexreplace pattern replacement [fileGlob|option]+").example("> rexreplace 'Foo' 'xxx' myfile.md","'foobar' in myfile.md will become 'xxxbar'").example("").example("> rr Foo xxx myfile.md","The alias 'rr' can be used instead of 'rexreplace'").example("").example("> rexreplace '(f?(o))o(.*)' '$3$1€2' myfile.md","'foobar' in myfile.md will become 'barfoo'").example("").example("> rexreplace '^#' '##' *.md","All markdown files in this dir got all headlines moved one level deeper").version("v","Print rexreplace version (can be given as only argument)",e).alias("v","version").boolean("V").describe("V","More chatty output").alias("V","verbose").boolean("L").describe("L","Literal string search (no regex used when searching)").alias("L","literal").boolean("I").describe("I","Void case insensitive search pattern.").alias("I","void-ignore-case").boolean("G").describe("G","Void global search (stop looking after the first match).").alias("G","void-global").boolean("s").describe("s","Have `.` also match newline.").alias("s","dot-all").boolean("M").describe("M","Void multiline search pattern. Makes ^ and $ match start/end of whole content rather than each line.").alias("M","void-multiline").boolean("u").describe("u","Treat pattern as a sequence of unicode code points.").alias("u","unicode").default("e","utf8").alias("e","encoding").describe("e","Encoding of files/piped data.").alias("E","engine").describe("E","What regex engine to use:").choices("E",["V8","RE2"]).default("E","V8").boolean("q").describe("q","Only display errors (no other info)").alias("q","quiet").boolean("Q").describe("Q","Never display errors or info").alias("Q","quiet-total").boolean("H").describe("H","Halt on first error").alias("H","halt").default("H",!1).boolean("d").describe("d","Print debug info").alias("d","debug").boolean("€").describe("€","Void having '€' as alias for '$' in pattern and replacement parameters").alias("€","void-euro").boolean("§").describe("§","Void having '§' as alias for '' in pattern and replacement parameters").alias("§","void-section").boolean("o").describe("o","Output the final result instead of saving to file. Will also output content even if no replacement has taken place.").alias("o","output").boolean("A").alias("A","void-async").describe("A","Handle files in a synchronous flow. Good to limit memory usage when handling large files. ").boolean("B").describe("B","Avoid temporary backing up file. Works async (independent of -A flag) and will speed up things but at one point data lives only in memory, and you will lose the content if the process is abrupted.").alias("B","void-backup").boolean("b").describe("b","Keep a backup file of the original content.").alias("b","keep-backup").boolean("m").describe("m","Output each match on a new line. Will not replace any content but you still need to provide a dummy value (like `_`) as replacement parameter. If search pattern does not contain matching groups the full match will be outputted. If search pattern does contain matching groups only matching groups will be outputted (same line with no delimiter). ").alias("m","output-match").boolean("T").alias("T","trim-pipe").describe("T","Trim piped data before processing. If piped data only consists of chars that can be trimmed (new line, space, tabs...) it will become an empty string. ").boolean("R").alias("R","replacement-pipe").describe("R","Replacement will be piped in. You still need to provide a dummy value (like `_`) as replacement parameter.").boolean("j").alias("j","replacement-js").describe("j","Treat replacement as javascript source code. \nThe statement from the last expression will become the replacement string. \nPurposefully implemented the most insecure way possible to remove _any_ incentive to consider running code from an untrusted part. \nThe full match will be available as a javascript variable named $0 while each captured group will be available as $1, $2, $3, ... and so on. \nAt some point, the $ char _will_ give you a headache when used from the command line, so use €0, €1, €2, €3... instead. \nIf the javascript source code references to the full match or a captured group the code will run once per match. Otherwise, it will run once per file. \n\nThe code has access to the following variables: \n`r` as an alias for `require` with both expanded to understand a relative path even if it is not starting with `./`, \n`fs` from node, \n`path` from node, \n`globs` from npm, \n`pipe`: the data piped into the command (null if no piped data), \n`find`: pattern searched for (the needle), \n`text`: full text being searched i.e. file content or piped data (the haystack), \n`bytes`: total size of the haystack in bytes, \n`size`: human-friendly representation of the total size of the haystack, \n`time`: String representing the local time when the command was invoked,\n`time_obj`: date object representing `time`,\n`now`: alias for `time`,\n`cwd`: current process working dir, \n`nl`: a new-line char,\n`_`: a single space char (for easy string concatenation).\n\nThe following values defaults to `❌` if haystack does not originate from a file:\n`file`: contains the full path of the active file being searched (including full filename), \n`file_rel`: contains `file` relative to current process working dir, \n`dirpath`: contains the full path without filename of the active file being searched, \n`dirpath_rel`: contains `dirpath` relative to current process working dir, \n`filename`: is the full filename of the active file being searched without path, \n`name`: filename of the active file being searched with no extension, \n`ext`: extension of the filename including leading dot, \n`mtime`: ISO inspired representation of the last local modification time of the current file, \n`ctime`: ISO representation of the local creation time of the current file. \n`mtime_obj`: date object representing `mtime`, \n`ctime_obj`: date object representing `ctime`. \n\nAll variables, except from module, date objects, `nl` and `_`, has a corresponding variable name followed by `_` where the content has an extra space at the end (for easy concatenation). \n").help("h").describe("h","Display help.").alias("h","help").epilog("Inspiration: .oO(What should 'sed' have been by now?)");function y(){w.showHelp(),process.exitCode=1}!function(){if(v)return y();var t={};Object.keys(w.argv).forEach(function(e){1<e.length&&e.indexOf("-")<0&&(t[e]=w.argv[e])});var e,n=!1,i="";if(t.files=w.argv._,t.pipedData=null,t.showHelp=w.showHelp,t.pattern=m,t.replacementJs?t.replacement=h:t.replacement=(void 0===(e=h)&&(e=""),new Function("return '"+e.replace(/'/g,"\\'")+"'")()),Boolean(process.stdin.isTTY)){if(t.replacementPipe)return y();p(t)}else process.stdin.setEncoding(t.encoding),process.stdin.on("readable",function(){var e=process.stdin.read();if(null!==e)for(n=!0,i+=e;e=process.stdin.read();)i+=e}),process.stdin.on("end",function(){n&&(w.argv.trimPipe&&(i=i.trim()),t.pipedData=i),p(t)})}()}();
