#!/usr/bin/env node
var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(b,c,f){b!=Array.prototype&&b!=Object.prototype&&(b[c]=f.value)};$jscomp.getGlobal=function(b){return"undefined"!=typeof window&&window===b?b:"undefined"!=typeof global&&null!=global?global:b};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.Symbol=function(){var b=0;return function(c){return $jscomp.SYMBOL_PREFIX+(c||"")+b++}}();
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var b=$jscomp.global.Symbol.iterator;b||(b=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[b]&&$jscomp.defineProperty(Array.prototype,b,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(b){var c=0;return $jscomp.iteratorPrototype(function(){return c<b.length?{done:!1,value:b[c++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(b){$jscomp.initSymbolIterator();b={next:b};b[$jscomp.global.Symbol.iterator]=function(){return this};return b};$jscomp.iteratorFromArray=function(b,c){$jscomp.initSymbolIterator();b instanceof String&&(b+="");var f=0,d={next:function(){if(f<b.length){var g=f++;return{value:c(g,b[g]),done:!1}}d.next=function(){return{done:!0,value:void 0}};return d.next()}};d[Symbol.iterator]=function(){return d};return d};
$jscomp.polyfill=function(b,c,f,d){if(c){f=$jscomp.global;b=b.split(".");for(d=0;d<b.length-1;d++){var g=b[d];g in f||(f[g]={});f=f[g]}b=b[b.length-1];d=f[b];c=c(d);c!=d&&null!=c&&$jscomp.defineProperty(f,b,{configurable:!0,writable:!0,value:c})}};$jscomp.polyfill("Array.prototype.keys",function(b){return b?b:function(){return $jscomp.iteratorFromArray(this,function(b){return b})}},"es6","es3");
(function(){function b(a){k.debug&&console.error(g.gray(JSON.stringify(a,null,4)))}function c(a){k.verbose&&b(a)}function f(a,b){void 0===a&&(a="");void 0===b&&(b=1);process.exitCode=b;throw Error(a);}function d(a){function p(h,a){if(a.voidAsync){v("Open sync: "+h);var b=l.readFileSync(h,a.encoding);return d(h,a,b)}v("Open async: "+h);l.readFile(h,a.encoding,function(b,c){return b?n(b):d(h,a,c)})}function d(a,e,p){b("Work on content from: "+a);if(e.replacementJs){var h=e.pipedData,d=p,f=e.pattern,
g=e.replacementOri,k=process.cwd(),z="",C="",m="",t="",u="",w=new Function("require","fs","globs","_pipe","_text","_find","_file","_path","_filename","_name","_ext","_cwd","code_rr","\n\t\t\t\t\tvar path \x3d require('path')\n\t\t\t\t\tvar require_ \x3d require\n\t\t\t\t\tvar r \x3d function(file){\n\t\t\t\t\t\tvar result \x3d null;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tresult \x3d require_(file);\n\t\t\t\t\t\t} catch (e){\n\t\t\t\t\t\t\tvar dir \x3d !!file.match(/^[\\/]/) ? '' : _cwd\n\t\t\t\t\t\t\tresult \x3d require_(path.resolve(dir, file))\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t\trequire \x3d r;\n\t\t\t\t\treturn eval(code_rr);\t\t\t\t\t\n\t\t\t\t\t");
if(!e.dataIsPiped){z=r.normalize(r.join(process.cwd(),a));var A=r.parse(z);C=A.dir;m=A.base;t=A.name;u=A.ext}/\$\d/.test(e.replacement)?e.replacement=function(){var a=arguments;c(arguments);for(var b=z,p=C,e=m,n=t,v=u,r="",q=0;q<arguments.length-2;q++)r+="var $"+q+"\x3d"+JSON.stringify(a[q])+"; ";return w(require,l,D,h,d,f,b,p,e,n,v,k,r+g)}:e.replacement=w(require,l,D,h,d,f,z,C,m,t,u,k,g)}var q=p.replace(e.regex,e.replacement);if(!e.outputMatch){if(e.output)return b("Output result from: "+a),process.stdout.write(q);
if(q===p)v("Nothing changed in: "+a);else{p=void 0;b("Write new content to: "+a);if(e.voidBackup)return l.writeFile(a,q,e.encoding,function(b){if(b)return n(b);x(a)});var y=r.normalize(r.join(process.cwd(),a));p=(new Date).toISOString().toString().replace(/:/g,"_").replace("Z","");var B=y+"."+p+".backup";if(e.voidAsync){try{l.renameSync(y,B),l.writeFileSync(y,q,e.encoding),e.keepBackup||l.unlinkSync(B)}catch(H){return n(H)}return x(a)}l.rename(y,B,function(b){if(b)return n(b);l.writeFile(y,q,e.encoding,
function(b){if(b)return n(b);e.keepBackup?x(a):l.unlink(B,function(b){if(b)return n(b);x(a)})})})}}}k=a;c("Displaying steps for:");c(a);a.pattern=function(a){c("Get final pattern");a=a.pattern;c(a);return a}(a)||"";a.replacement=function(a){c("Get final replacement");if(a.replacementPipe){c("Piping replacement");a.pipedDataUsed=!0;if(null===a.pipedData)return t("No data piped into replacement");a.replacement=a.pipedData}if(a.outputMatch)return c("Output match"),"6">process.versions.node?t("outputMatch is only supported in node 6+"):
function(){var a=arguments;c(arguments);if(3===arguments.length)return c("Printing full match"),process.stdout.write(arguments[0]+"\n"),"";for(var b=1;b<arguments.length-2;b++)process.stdout.write(a[b]);process.stdout.write("\n");return""};if(a.replacementJs&&/\$\d/.test(a.replacement)&&"6">process.versions.node)return t("Captured groups for javascript replacement is only supported in node 6+");c(a.replacement);return a.replacement}(a)||"";a.replacementOri=a.replacement;a.regex=function(a){c("Get final regex");
var b=null;c("Get flags");var h="";a.voidGlobal||(h+="g");a.voidIgnoreCase||(h+="i");a.voidMultiline||(h+="m");a.unicode&&(h+="u");c(h);try{b=new RegExp(a.pattern,h)}catch(G){t("Wrongly formatted regex pattern",G)}c(b);return b}(a)||"";c(a);if(function(a){c("Check Piped Data");return a.files.length?(a.replacementJs||v("Piped data never used."),!1):null===a.pipedData||a.pipedDataUsed?!1:(a.dataIsPiped=!0,a.output=!0)}(a))return d("Piped data",a,a.pipedData);a.files=D.sync(a.files);if(!a.files.length)return n(a.files.length+
" files found");v(a.files.length+" files found");c(a);a.files.filter(function(a){return l.existsSync(a)?!0:n("File not found:",a)}).forEach(function(b){return p(b,a)})}var g={};g.red=g.green=g.gray=function(a){return a};var k=null,x=function(a,b){void 0===b&&(b="");k.quiet||k.quietTotal||console.error(g.gray(a),b)},v=function(a,c){void 0===c&&(c="");k.verbose?x(a,c):b(a+" "+c)},t=function(a,b,c){void 0===b&&(b="");void 0===c&&(c=!1);c&&!k.quietTotal&&k.showHelp();n(a,b);f(a)},n=function(a,b){void 0===
b&&(b="");k.quiet||k.quietTotal||console.error(g.red(a),b);k.halt&&f(a);return!1},l=require("fs"),r=require("path"),D=require("globs"),E=!1;if(4>process.argv.length)E=!0;else{var F=process.argv.splice(2,2);var w=F[0];var u=F[1]}var m=require("yargs").strict().usage("RexReplace 4.1.1: Regexp search and replace for files using lookahead and backreference to matching groups in the replacement. Defaults to global multiline case-insensitive search.\n\n\x3e rexreplace pattern replacement [fileGlob|option]+").example("\x3e rexreplace 'Foo' 'xxx' myfile.md",
"'foobar' in myfile.md will become 'xxxbar'").example("").example("\x3e rr Foo xxx myfile.md","The alias 'rr' can be used instead of 'rexreplace'").example("").example("\x3e rexreplace '(f?(o))o(.*)' '$3$1\u20ac2' myfile.md","'foobar' in myfile.md will become 'barfoo'").example("").example("\x3e rexreplace '^#' '##' *.md","All markdown files in this dir got all headlines moved one level deeper").version("v","Print rexreplace version (can be given as only argument)","4.1.1").alias("v","version").boolean("V").describe("V",
"More chatty output").alias("V","verbose").boolean("I").describe("I","Void case insensitive search pattern.").alias("I","void-ignore-case").boolean("G").describe("G","Void global search (stop looking after first match).").alias("G","void-global").boolean("M").describe("M","Void multiline search pattern. Makes ^ and $ match start/end of whole content rather than each line.").alias("M","void-multiline").boolean("u").describe("u","Treat pattern as a sequence of unicode code points.").alias("u","unicode").default("e",
"utf8").alias("e","encoding").describe("e","Encoding of files/piped data.").boolean("q").describe("q","Only display errors (no other info)").alias("q","quiet").boolean("Q").describe("Q","Never display errors or info").alias("Q","quiet-total").boolean("H").describe("H","Halt on first error").alias("H","halt").default("H",!1).boolean("d").describe("d","Print debug info").alias("d","debug").boolean("\u20ac").describe("\u20ac","Void having '\u20ac' as alias for '$' in pattern and replacement parameters").alias("\u20ac",
"void-euro").boolean("o").describe("o","Output the final result instead of saving to file. Will also output content even if no replacement has taken place.").alias("o","output").boolean("A").alias("A","void-async").describe("A","Handle files in a synchronous flow. Good to limit memory usage when handling large files. ").boolean("B").describe("B","Avoid temporary backing up file. Works async (independent of -A flag) and will speed up things but at one point data lives only in memory, and you will lose the content if the process is abrupted.").alias("B",
"void-backup").boolean("b").describe("b","Keep a backup file of the original content.").alias("b","keep-backup").boolean("m").describe("m","Output each match on a new line. Will not replace any content but you still need to provide a dummy value (like `_`) as replacement parameter. If search pattern does not contain matching groups the full match will be outputted. If search pattern does contain matching groups only matching groups will be outputted (same line with no delimiter). ").alias("m","output-match").boolean("T").alias("T",
"trim-pipe").describe("T","Trim piped data before processing. If piped data only consists of chars that can be trimmed (new line, space, tabs...) it will become an empty string. ").boolean("R").alias("R","replacement-pipe").describe("R","Replacement will be piped in. You still need to provide a dummy value (like `_`) as replacement parameter.").boolean("j").alias("j","replacement-js").describe("j","Treat replacement as javascript source code. The statement from the last expression will become the replacement string. Purposefully implemented the most insecure way possible to remove _any_ incentive to consider running code from an untrusted person - that be anyone that is not yourself. The full match will be available as a javascript variable named $0 while each captured group will be available as $1, $2, $3, ... and so on. At some point, the $ char _will_ give you a headache when used from the command line, so use \u20ac0, \u20ac1, \u20ac2, \u20ac3... instead. If the javascript source code references to the full match or a captured group the code will run once per match. Otherwise, it will run once per file. \nThe code has access to the following variables: \n'require' with the alias `r` both expanded to understand relative path even if not starting with `./`, \n'fs' from node, \n'globs' from npm, \n'_cwd' current working dir, \n'_pipe' is the data piped into the command (null if no piped data), \n'_find' is the pattern searched for (the needle). \n'_text' is the full text being searched i.e. file content or piped data (the haystack). \nThe following values are also available if working on a file (if data is being piped they are all set to an empty string): \n'_file' is the full path of the active file being searched (including full filename), \n'_path' is the full path without filename of the active file being searched, \n'_filename' is the full filename of the active file being searched, \n'_name' is the filename of the active file being searched with no extension, \n'_ext' is the extension of the filename including leading dot. ").help("h").describe("h",
"Display help.").alias("h","help").epilog("Inspiration: .oO(What should 'sed' have been by now?)");(function(){if(E)m.showHelp(),process.exitCode=1;else{m.argv.voidEuro||(w=w.replace(/\u20ac/g,"$"),u=u.replace(/\u20ac/g,"$"));var a={};Object.keys(m.argv).forEach(function(b){1<b.length&&0>b.indexOf("-")&&(a[b]=m.argv[b])});var b=!1,c="";a.files=m.argv._;a.pipedData=null;a.showHelp=m.showHelp;a.pattern=w;a.replacement=a.replacementJs?u:(new Function("return '"+u.replace(/'/g,"\\'")+"'"))();process.stdin.isTTY?
a.replacementPipe?(m.showHelp(),process.exitCode=1):d(a):(process.stdin.setEncoding(a.encoding),process.stdin.on("readable",function(){var a=process.stdin.read();if(null!==a)for(b=!0,c+=a;a=process.stdin.read();)c+=a}),process.stdin.on("end",function(){b&&(m.argv.trimPipe&&(c=c.trim()),a.pipedData=c);d(a)}))}})()})();
